{
  "version": 3,
  "sources": ["../../../js/core/websocket-client.js", "../../../js/utils/utils.js", "../../../js/utils/error-boundary.js", "../../../js/utils/logger.js", "../../../js/tools/google-search.js", "../../../js/tools/weather-tool.js", "../../../js/tools/tool-manager.js", "../../../js/core/worklet-registry.js", "../../../js/config/config.js", "../../../js/audio/audio-streamer.js", "../../../js/audio/audio-recorder.js", "../../../js/video/video-recorder.js", "../../../js/video/video-manager.js", "../../../js/video/screen-recorder.js", "../../../js/main.js", "../../../../../../../../../../../../opt/homebrew/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../../../../../../../opt/homebrew/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-bH90QW/middleware-insertion-facade.js", "../../../../../../../../../../../../opt/homebrew/lib/node_modules/wrangler/templates/middleware/common.ts", "../bundle-bH90QW/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/shengchun.sun/Library/CloudStorage/OneDrive-\u4E2A\u4EBA/MyCloud/Code/gemini-2-live-api/gemini-2-live-api-demo/.wrangler/tmp/dev-nDxU2o",
  "sourcesContent": ["import { EventEmitter } from 'https://cdn.skypack.dev/eventemitter3';\nimport { blobToJSON, base64ToArrayBuffer } from '../utils/utils.js';\nimport { ApplicationError, ErrorCodes } from '../utils/error-boundary.js';\nimport { Logger } from '../utils/logger.js';\nimport { ToolManager } from '../tools/tool-manager.js';\n\n/**\n * Client for interacting with the Gemini 2.0 Flash Multimodal Live API via WebSockets.\n * This class handles the connection, sending and receiving messages, and processing responses.\n * It extends EventEmitter to emit events for various stages of the interaction.\n *\n * @extends EventEmitter\n */\nexport class MultimodalLiveClient extends EventEmitter {\n    /**\n     * Creates a new MultimodalLiveClient.\n     *\n     * @param {Object} options - Configuration options.\n     * @param {string} [options.url] - The WebSocket URL for the Gemini API. Defaults to a URL constructed with the provided API key.\n     * @param {string} options.apiKey - Your API key for the Gemini API.\n     */\n    constructor({ url, apiKey }) {\n        super();\n        this.url = url || `wss://geminiwebsockets.autodev.us.kg/ws/google.ai.generativelanguage.v1alpha.GenerativeService.BidiGenerateContent?key=${apiKey}`;\n        this.ws = null;\n        this.config = null;\n        this.send = this.send.bind(this);\n        this.toolManager = new ToolManager();\n    }\n\n    /**\n     * Logs a message with a timestamp and type. Emits a 'log' event.\n     *\n     * @param {string} type - The type of the log message (e.g., 'server.send', 'client.close').\n     * @param {string|Object} message - The message to log.\n     */\n    log(type, message) {\n        this.emit('log', { date: new Date(), type, message });\n    }\n\n    /**\n     * Connects to the WebSocket server with the given configuration.\n     * The configuration can include model settings, generation config, system instructions, and tools.\n     *\n     * @param {Object} config - The configuration for the connection.\n     * @param {string} config.model - The model to use (e.g., 'gemini-2.0-flash-exp').\n     * @param {Object} config.generationConfig - Configuration for content generation.\n     * @param {string[]} config.generationConfig.responseModalities - The modalities for the response (e.g., \"audio\", \"text\").\n     * @param {Object} config.generationConfig.speechConfig - Configuration for speech generation.\n     * @param {Object} config.generationConfig.speechConfig.voiceConfig - Configuration for the voice.\n     * @param {string} config.generationConfig.speechConfig.voiceConfig.prebuiltVoiceConfig.voiceName - The name of the prebuilt voice to use.\n     * @param {Object} config.systemInstruction - Instructions for the system.\n     * @param {Object[]} config.systemInstruction.parts - Parts of the system instruction.\n     * @param {string} config.systemInstruction.parts[].text - Text content of the instruction part.\n     * @param {Object[]} [config.tools] - Additional tools to be used by the model.\n     * @returns {Promise<boolean>} - Resolves with true when the connection is established.\n     * @throws {ApplicationError} - Throws an error if the connection fails.\n     */\n    connect(config) {\n        this.config = {\n            ...config,\n            tools: [\n                ...this.toolManager.getToolDeclarations(),\n                ...(config.tools || [])\n            ]\n        };\n        const ws = new WebSocket(this.url);\n\n        ws.addEventListener('message', async (evt) => {\n            if (evt.data instanceof Blob) {\n                this.receive(evt.data);\n            } else {\n                console.log('Non-blob message', evt);\n            }\n        });\n\n        return new Promise((resolve, reject) => {\n            const onError = (ev) => {\n                this.disconnect(ws);\n                const message = `Could not connect to \"${this.url}\"`;\n                this.log(`server.${ev.type}`, message);\n                throw new ApplicationError(\n                    message,\n                    ErrorCodes.WEBSOCKET_CONNECTION_FAILED,\n                    { originalError: ev }\n                );\n            };\n\n            ws.addEventListener('error', onError);\n            ws.addEventListener('open', (ev) => {\n                if (!this.config) {\n                    reject('Invalid config sent to `connect(config)`');\n                    return;\n                }\n                this.log(`client.${ev.type}`, 'Connected to socket');\n                this.emit('open');\n\n                this.ws = ws;\n\n                const setupMessage = { setup: this.config };\n                this._sendDirect(setupMessage);\n                this.log('client.send', 'setup');\n\n                ws.removeEventListener('error', onError);\n                ws.addEventListener('close', (ev) => {\n                    this.disconnect(ws);\n                    let reason = ev.reason || '';\n                    if (reason.toLowerCase().includes('error')) {\n                        const prelude = 'ERROR]';\n                        const preludeIndex = reason.indexOf(prelude);\n                        if (preludeIndex > 0) {\n                            reason = reason.slice(preludeIndex + prelude.length + 1);\n                        }\n                    }\n                    this.log(`server.${ev.type}`, `Disconnected ${reason ? `with reason: ${reason}` : ''}`);\n                    this.emit('close', { code: ev.code, reason });\n                });\n                resolve(true);\n            });\n        });\n    }\n\n    /**\n     * Disconnects from the WebSocket server.\n     *\n     * @param {WebSocket} [ws] - The WebSocket instance to disconnect. If not provided, defaults to the current instance.\n     * @returns {boolean} - True if disconnected, false otherwise.\n     */\n    disconnect(ws) {\n        if ((!ws || this.ws === ws) && this.ws) {\n            this.ws.close();\n            this.ws = null;\n            this.log('client.close', 'Disconnected');\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Receives and processes a message from the WebSocket server.\n     * Handles different types of responses like tool calls, setup completion, and server content.\n     *\n     * @param {Blob} blob - The received blob data.\n     */\n    async receive(blob) {\n        const response = await blobToJSON(blob);\n        if (response.toolCall) {\n            this.log('server.toolCall', response);\n            await this.handleToolCall(response.toolCall);\n            return;\n        }\n        if (response.toolCallCancellation) {\n            this.log('receive.toolCallCancellation', response);\n            this.emit('toolcallcancellation', response.toolCallCancellation);\n            return;\n        }\n        if (response.setupComplete) {\n            this.log('server.send', 'setupComplete');\n            this.emit('setupcomplete');\n            return;\n        }\n        if (response.serverContent) {\n            const { serverContent } = response;\n            if (serverContent.interrupted) {\n                this.log('receive.serverContent', 'interrupted');\n                this.emit('interrupted');\n                return;\n            }\n            if (serverContent.turnComplete) {\n                this.log('server.send', 'turnComplete');\n                this.emit('turncomplete');\n            }\n            if (serverContent.modelTurn) {\n                let parts = serverContent.modelTurn.parts;\n                const audioParts = parts.filter((p) => p.inlineData && p.inlineData.mimeType.startsWith('audio/pcm'));\n                const base64s = audioParts.map((p) => p.inlineData?.data);\n                const otherParts = parts.filter((p) => !audioParts.includes(p));\n\n                base64s.forEach((b64) => {\n                    if (b64) {\n                        const data = base64ToArrayBuffer(b64);\n                        this.emit('audio', data);\n                        this.log(`server.audio`, `buffer (${data.byteLength})`);\n                    }\n                });\n\n                if (!otherParts.length) {\n                    return;\n                }\n\n                parts = otherParts;\n                const content = { modelTurn: { parts } };\n                this.emit('content', content);\n                this.log(`server.content`, response);\n            }\n        } else {\n            console.log('Received unmatched message', response);\n        }\n    }\n\n    /**\n     * Sends real-time input data to the server.\n     *\n     * @param {Array} chunks - An array of media chunks to send. Each chunk should have a mimeType and data.\n     */\n    sendRealtimeInput(chunks) {\n        let hasAudio = false;\n        let hasVideo = false;\n        let totalSize = 0;\n\n        for (let i = 0; i < chunks.length; i++) {\n            const ch = chunks[i];\n            totalSize += ch.data.length;\n            if (ch.mimeType.includes('audio')) {\n                hasAudio = true;\n            }\n            if (ch.mimeType.includes('image')) {\n                hasVideo = true;\n            }\n        }\n\n        const message = hasAudio && hasVideo ? 'audio + video' : hasAudio ? 'audio' : hasVideo ? 'video' : 'unknown';\n        Logger.debug(`Sending realtime input: ${message} (${Math.round(totalSize/1024)}KB)`);\n\n        const data = { realtimeInput: { mediaChunks: chunks } };\n        this._sendDirect(data);\n        this.log(`client.realtimeInput`, message);\n    }\n\n    /**\n     * Sends a tool response to the server.\n     *\n     * @param {Object} toolResponse - The tool response to send.\n     */\n    sendToolResponse(toolResponse) {\n        const message = { toolResponse };\n        this._sendDirect(message);\n        this.log(`client.toolResponse`, message);\n    }\n\n    /**\n     * Sends a message to the server.\n     *\n     * @param {string|Object|Array} parts - The message parts to send. Can be a string, an object, or an array of strings/objects.\n     * @param {boolean} [turnComplete=true] - Indicates if this message completes the current turn.\n     */\n    send(parts, turnComplete = true) {\n        parts = Array.isArray(parts) ? parts : [parts];\n        const formattedParts = parts.map(part => {\n            if (typeof part === 'string') {\n                return { text: part };\n            } else if (typeof part === 'object' && !part.text && !part.inlineData) {\n                return { text: JSON.stringify(part) };\n            }\n            return part;\n        });\n        const content = { role: 'user', parts: formattedParts };\n        const clientContentRequest = { clientContent: { turns: [content], turnComplete } };\n        this._sendDirect(clientContentRequest);\n        this.log(`client.send`, clientContentRequest);\n    }\n\n    /**\n     * Sends a message directly to the WebSocket server.\n     *\n     * @param {Object} request - The request to send.\n     * @throws {Error} - Throws an error if the WebSocket is not connected.\n     * @private\n     */\n    _sendDirect(request) {\n        if (!this.ws) {\n            throw new Error('WebSocket is not connected');\n        }\n        const str = JSON.stringify(request);\n        this.ws.send(str);\n    }\n\n    /**\n     * Handles a tool call from the server.\n     *\n     * @param {Object} toolCall - The tool call data.\n     */\n    async handleToolCall(toolCall) {\n        try {\n            const response = await this.toolManager.handleToolCall(toolCall.functionCalls[0]);\n            this.sendToolResponse(response);\n        } catch (error) {\n            Logger.error('Tool call failed', error);\n            this.sendToolResponse({\n                functionResponses: [{\n                    response: { error: error.message },\n                    id: toolCall.functionCalls[0].id\n                }]\n            });\n        }\n    }\n} ", "/**\n * @fileoverview Utility functions for the application.\n */\n\n/**\n * Converts a Blob to a JSON object.\n *\n * @param {Blob} blob - The Blob to convert.\n * @returns {Promise<Object>} A promise that resolves with the JSON object.\n * @throws {string} Throws an error if the Blob cannot be parsed to JSON.\n */\nexport function blobToJSON(blob) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => {\n            if (reader.result) {\n                const json = JSON.parse(reader.result);\n                resolve(json);\n            } else {\n                reject('Failed to parse blob to JSON');\n            }\n        };\n        reader.readAsText(blob);\n    });\n}\n\n/**\n * Converts a base64 string to an ArrayBuffer.\n *\n * @param {string} base64 - The base64 string to convert.\n * @returns {ArrayBuffer} The ArrayBuffer.\n */\nexport function base64ToArrayBuffer(base64) {\n    const binaryString = atob(base64);\n    const bytes = new Uint8Array(binaryString.length);\n    for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes.buffer;\n} ", "/**\n * @fileoverview Defines an error boundary for handling various types of errors in the application.\n * It provides a set of predefined error codes and an ApplicationError class for consistent error handling.\n */\n\n/**\n * Enumeration of error codes for different types of errors.\n * @enum {string}\n */\nexport const ErrorCodes = {\n    // Audio related errors\n    AUDIO_DEVICE_NOT_FOUND: 'AUDIO_DEVICE_NOT_FOUND',\n    AUDIO_PERMISSION_DENIED: 'AUDIO_PERMISSION_DENIED',\n    AUDIO_NOT_SUPPORTED: 'AUDIO_NOT_SUPPORTED',\n    AUDIO_INITIALIZATION_FAILED: 'AUDIO_INITIALIZATION_FAILED',\n    AUDIO_RECORDING_FAILED: 'AUDIO_RECORDING_FAILED',\n    AUDIO_STOP_FAILED: 'AUDIO_STOP_FAILED',\n    AUDIO_CONVERSION_FAILED: 'AUDIO_CONVERSION_FAILED',\n\n    // WebSocket related errors\n    WEBSOCKET_CONNECTION_FAILED: 'WEBSOCKET_CONNECTION_FAILED',\n    WEBSOCKET_MESSAGE_FAILED: 'WEBSOCKET_MESSAGE_FAILED',\n    WEBSOCKET_CLOSE_FAILED: 'WEBSOCKET_CLOSE_FAILED',\n\n    // API related errors\n    API_AUTHENTICATION_FAILED: 'API_AUTHENTICATION_FAILED',\n    API_REQUEST_FAILED: 'API_REQUEST_FAILED',\n    API_RESPONSE_INVALID: 'API_RESPONSE_INVALID',\n\n    // General errors\n    UNKNOWN_ERROR: 'UNKNOWN_ERROR',\n    INVALID_STATE: 'INVALID_STATE',\n    INVALID_PARAMETER: 'INVALID_PARAMETER',\n\n    // Video related errors\n    VIDEO_DEVICE_NOT_FOUND: 'VIDEO_DEVICE_NOT_FOUND',\n    VIDEO_PERMISSION_DENIED: 'VIDEO_PERMISSION_DENIED',\n    VIDEO_NOT_SUPPORTED: 'VIDEO_NOT_SUPPORTED',\n    VIDEO_CODEC_NOT_SUPPORTED: 'VIDEO_CODEC_NOT_SUPPORTED',\n    VIDEO_START_FAILED: 'VIDEO_START_FAILED',\n    VIDEO_STOP_FAILED: 'VIDEO_STOP_FAILED',\n\n    // Screen sharing related errors\n    SCREEN_DEVICE_NOT_FOUND: 'SCREEN_DEVICE_NOT_FOUND',\n    SCREEN_PERMISSION_DENIED: 'SCREEN_PERMISSION_DENIED',\n    SCREEN_NOT_SUPPORTED: 'SCREEN_NOT_SUPPORTED',\n    SCREEN_START_FAILED: 'SCREEN_START_FAILED',\n    SCREEN_STOP_FAILED: 'SCREEN_STOP_FAILED',\n};\n\n/**\n * Custom error class for application-specific errors.\n * Extends the built-in Error class and adds properties for error code, details, and timestamp.\n */\nexport class ApplicationError extends Error {\n    /**\n     * Creates a new ApplicationError.\n     *\n     * @param {string} message - The error message.\n     * @param {string} [code=ErrorCodes.UNKNOWN_ERROR] - The error code.\n     * @param {Object} [details={}] - Additional details about the error.\n     */\n    constructor(message, code = ErrorCodes.UNKNOWN_ERROR, details = {}) {\n        super(message);\n        this.name = 'ApplicationError';\n        this.code = code;\n        this.details = details;\n        this.timestamp = new Date().toISOString();\n\n        // Ensure proper stack trace\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, ApplicationError);\n        }\n    }\n\n    /**\n     * Converts the error object to a JSON representation.\n     *\n     * @returns {Object} The JSON representation of the error.\n     */\n    toJSON() {\n        return {\n            name: this.name,\n            message: this.message,\n            code: this.code,\n            details: this.details,\n            timestamp: this.timestamp,\n            stack: this.stack\n        };\n    }\n} ", "import { EventEmitter } from 'https://cdn.skypack.dev/eventemitter3';\n\n/**\n * @fileoverview A simple logger that logs messages to the console and emits events.\n * It also stores a limited number of logs in memory and provides a method to export them.\n */\nexport class Logger extends EventEmitter {\n    static instance = null;\n    static maxStoredLogs = 1000;\n    static logs = [];\n\n    /**\n     * Returns the singleton instance of the Logger.\n     *\n     * @returns {Logger} The Logger instance.\n     */\n    static getInstance() {\n        if (!Logger.instance) {\n            Logger.instance = new Logger();\n        }\n        return Logger.instance;\n    }\n\n    /**\n     * Logs a message with the given level and optional data.\n     *\n     * @param {string} level - The log level (e.g., 'debug', 'info', 'warn', 'error').\n     * @param {string} message - The message to log.\n     * @param {Object} [data=null] - Optional data to include with the log.\n     */\n    static log(level, message, data = null) {\n        const logger = Logger.getInstance();\n        const timestamp = new Date().toISOString();\n        const logEntry = {\n            timestamp,\n            level,\n            message,\n            data\n        };\n\n        // Store log\n        Logger.logs.push(logEntry);\n        if (Logger.logs.length > Logger.maxStoredLogs) {\n            Logger.logs.shift();\n        }\n\n        // Console output\n        switch (level) {\n            case Logger.LEVELS.ERROR:\n                console.error(logEntry);\n                break;\n            case Logger.LEVELS.WARN:\n                console.warn(logEntry);\n                break;\n            case Logger.LEVELS.INFO:\n                console.info(logEntry);\n                break;\n            default:\n                console.log(logEntry);\n        }\n\n        // Emit event\n        logger.emit('log', logEntry);\n    }\n\n    /**\n     * Exports the stored logs as a JSON file.\n     */\n    static export() {\n        const blob = new Blob([JSON.stringify(Logger.logs, null, 2)], {\n            type: 'application/json'\n        });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `logs-${new Date().toISOString()}.json`;\n        a.click();\n        URL.revokeObjectURL(url);\n    }\n\n    /**\n     * Log levels.\n     * @enum {string}\n     */\n    static LEVELS = {\n        DEBUG: 'debug',\n        INFO: 'info',\n        WARN: 'warn',\n        ERROR: 'error'\n    };\n\n    /**\n     * Logs a debug message.\n     *\n     * @param {string} message - The message to log.\n     * @param {Object} [data] - Optional data to include with the log.\n     */\n    static debug(message, data) {\n        this.log(this.LEVELS.DEBUG, message, data);\n    }\n\n    /**\n     * Logs an info message.\n     *\n     * @param {string} message - The message to log.\n     * @param {Object} [data] - Optional data to include with the log.\n     */\n    static info(message, data) {\n        this.log(this.LEVELS.INFO, message, data);\n    }\n\n    /**\n     * Logs a warning message.\n     *\n     * @param {string} message - The message to log.\n     * @param {Object} [data] - Optional data to include with the log.\n     */\n    static warn(message, data) {\n        this.log(this.LEVELS.WARN, message, data);\n    }\n\n    /**\n     * Logs an error message.\n     *\n     * @param {string} message - The message to log.\n     * @param {Object} [data] - Optional data to include with the log.\n     */\n    static error(message, data) {\n        this.log(this.LEVELS.ERROR, message, data);\n    }\n} ", "import { Logger } from '../utils/logger.js';\n\n/**\n * Represents a tool for performing Google searches.\n * This tool is a placeholder as the actual search functionality is handled by the Gemini API.\n */\nexport class GoogleSearchTool {\n    /**\n     * Returns the tool declaration for the Gemini API.\n     * The declaration is an empty object, indicating to the API that this tool can be used.\n     *\n     * @returns {Object} An empty object as the tool declaration.\n     */\n    getDeclaration() {\n        return {\n            // Return empty object as per Gemini API requirements\n            // This tells the model it can use Google Search\n        };\n    }\n\n    /**\n     * Executes the Google search.\n     * In this implementation, it logs the search query and returns null,\n     * as the actual search is performed server-side by the Gemini API.\n     *\n     * @param {Object} args - The arguments for the search, including the search query.\n     * @returns {null} Always returns null as the search is handled externally.\n     * @throws {Error} Throws an error if the search execution fails.\n     */\n    async execute(args) {\n        try {\n            Logger.info('Executing Google Search', args);\n            // The actual implementation would be provided by the Gemini API\n            // We don't need to implement anything here as it's handled server-side\n            return null;\n        } catch (error) {\n            Logger.error('Google Search failed', error);\n            throw error;\n        }\n    }\n} ", "import { Logger } from '../utils/logger.js';\n\n/**\n * Represents a tool for retrieving weather forecasts.\n * This tool provides a mock implementation for demonstration purposes.\n */\nexport class WeatherTool {\n    /**\n     * Returns the tool declaration for the Gemini API.\n     * The declaration defines the function name, description, and parameters.\n     *\n     * @returns {Object[]} An array containing the function declaration for getting weather on a specific date.\n     */\n    getDeclaration() {\n        // Return an array of function declarations\n        return [{\n            name: \"get_weather_on_date\",\n            description: \"Get the weather forecast for a specific location and date\",\n            parameters: {\n                type: \"object\",\n                properties: {\n                    location: {\n                        type: \"string\",\n                        description: \"The location to get weather for (city name)\"\n                    },\n                    date: {\n                        type: \"string\",\n                        description: \"The date to get weather for (YYYY-MM-DD format)\"\n                    }\n                },\n                required: [\"location\", \"date\"]\n            }\n        }];\n    }\n\n    /**\n     * Executes the weather tool.\n     * Generates a mock weather forecast based on the provided location and date.\n     *\n     * @param {Object} args - The arguments for the tool.\n     * @param {string} args.location - The location for the weather forecast.\n     * @param {string} args.date - The date for the weather forecast (YYYY-MM-DD).\n     * @returns {Promise<Object>} A promise that resolves with the weather forecast.\n     * @throws {Error} Throws an error if the tool execution fails.\n     */\n    async execute(args) {\n        try {\n            Logger.info('Executing Weather Tool', args);\n            const { location, date } = args;\n\n            // Mock weather data\n            const weatherConditions = [\n                'sunny', 'partly cloudy', 'cloudy', \n                'light rain', 'heavy rain', 'thunderstorm',\n                'windy', 'snow', 'foggy'\n            ];\n            \n            const temperatures = {\n                sunny: { min: 20, max: 35 },\n                'partly cloudy': { min: 18, max: 30 },\n                cloudy: { min: 15, max: 25 },\n                'light rain': { min: 12, max: 20 },\n                'heavy rain': { min: 10, max: 18 },\n                thunderstorm: { min: 15, max: 25 },\n                windy: { min: 8, max: 15 },\n                snow: { min: -5, max: 5 },\n                foggy: { min: 5, max: 15 }\n            };\n\n            // Generate consistent but pseudo-random weather based on location and date\n            const seed = this.hashString(`${location}${date}`);\n            const condition = weatherConditions[seed % weatherConditions.length];\n            const temp = temperatures[condition];\n            \n            // Add some randomness to temperature within the range\n            const currentTemp = temp.min + (seed % (temp.max - temp.min));\n\n            return {\n                location,\n                date,\n                condition,\n                temperature: Math.round(currentTemp),\n                humidity: 40 + (seed % 40), // Random humidity between 40-80%\n                windSpeed: 5 + (seed % 25),  // Random wind speed between 5-30 km/h\n                forecast: `The weather in ${location} on ${date} will be ${condition} with a temperature of ${Math.round(currentTemp)}\u00B0C`\n            };\n\n        } catch (error) {\n            Logger.error('Weather Tool failed', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Generates a numeric hash from a string.\n     * Used to create a pseudo-random seed for consistent weather generation.\n     *\n     * @param {string} str - The input string.\n     * @returns {number} The numeric hash.\n     */\n    // Helper function to generate a numeric hash from a string\n    hashString(str) {\n        let hash = 0;\n        for (let i = 0; i < str.length; i++) {\n            const char = str.charCodeAt(i);\n            hash = ((hash << 5) - hash) + char;\n            hash = hash & hash;\n        }\n        return Math.abs(hash);\n    }\n} ", "import { Logger } from '../utils/logger.js';\nimport { ApplicationError, ErrorCodes } from '../utils/error-boundary.js';\nimport { GoogleSearchTool } from './google-search.js';\nimport { WeatherTool } from './weather-tool.js';\n\n/**\n * Manages the registration and execution of tools.\n * Tools are used to extend the functionality of the Gemini API, allowing it to interact with external services.\n */\nexport class ToolManager {\n    /**\n     * Creates a new ToolManager and registers default tools.\n     */\n    constructor() {\n        this.tools = new Map();\n        this.registerDefaultTools();\n    }\n\n    /**\n     * Registers the default tools: GoogleSearchTool and WeatherTool.\n     */\n    registerDefaultTools() {\n        this.registerTool('googleSearch', new GoogleSearchTool());\n        this.registerTool('weather', new WeatherTool());\n    }\n\n    /**\n     * Registers a new tool.\n     *\n     * @param {string} name - The name of the tool.\n     * @param {Object} toolInstance - The tool instance. Must have a `getDeclaration` method.\n     * @throws {ApplicationError} Throws an error if a tool with the same name is already registered.\n     */\n    registerTool(name, toolInstance) {\n        if (this.tools.has(name)) {\n            throw new ApplicationError(\n                `Tool ${name} is already registered`,\n                ErrorCodes.INVALID_STATE\n            );\n        }\n        this.tools.set(name, toolInstance);\n        Logger.info(`Tool ${name} registered successfully`);\n    }\n\n    /**\n     * Returns the tool declarations for all registered tools.\n     * These declarations are used by the Gemini API to understand what tools are available.\n     *\n     * @returns {Object[]} An array of tool declarations.\n     */\n    getToolDeclarations() {\n        const allDeclarations = [];\n        \n        this.tools.forEach((tool, name) => {\n            if (tool.getDeclaration) {\n                if (name === 'weather') {\n                    allDeclarations.push({\n                        functionDeclarations: tool.getDeclaration()\n                    });\n                } else {\n                    allDeclarations.push({ [name]: tool.getDeclaration() });\n                }\n            }\n        });\n\n        return allDeclarations;\n    }\n\n    /**\n     * Handles a tool call from the Gemini API.\n     * Executes the specified tool with the given arguments.\n     *\n     * @param {Object} functionCall - The function call object from the Gemini API.\n     * @param {string} functionCall.name - The name of the tool to execute.\n     * @param {Object} functionCall.args - The arguments to pass to the tool.\n     * @param {string} functionCall.id - The ID of the function call.\n     * @returns {Promise<Object>} A promise that resolves with the tool's response.\n     * @throws {ApplicationError} Throws an error if the tool is unknown or if the tool execution fails.\n     */\n    async handleToolCall(functionCall) {\n        const { name, args, id } = functionCall;\n        Logger.info(`Handling tool call: ${name}`, { args });\n\n        let tool;\n        if (name === 'get_weather_on_date') {\n            tool = this.tools.get('weather');\n        } else {\n            tool = this.tools.get(name);\n        }\n\n        if (!tool) {\n            throw new ApplicationError(\n                `Unknown tool: ${name}`,\n                ErrorCodes.INVALID_PARAMETER\n            );\n        }\n\n        try {\n            const result = await tool.execute(args);\n            return {\n                functionResponses: [{\n                    response: { output: result },\n                    id\n                }]\n            };\n        } catch (error) {\n            Logger.error(`Tool execution failed: ${name}`, error);\n            return {\n                functionResponses: [{\n                    response: { error: error.message },\n                    id\n                }]\n            };\n        }\n    }\n} ", "/**\n * @fileoverview This module provides a registry for managing Web Audio API worklets.\n * It allows for the creation of worklet URLs from source code, facilitating the dynamic\n * loading and use of audio worklets in web applications.\n */\n\n/**\n * A map to store registered worklets.\n * @type {Map<string, string>}\n */\nexport const registeredWorklets = new Map();\n\n/**\n * Creates a worklet URL from the provided source code.\n * This function takes the source code of a worklet, wraps it in an immediately invoked function expression (IIFE),\n * creates a Blob from this code, and then generates a URL for the Blob. This URL can be used to load the worklet\n * in an AudioWorkletNode.\n *\n * @param {string} workletName - The name of the worklet.\n * @param {Function} workletSrc - The source code of the worklet, typically a function.\n * @returns {string} The URL of the created worklet.\n */\nexport function createWorketFromSrc(workletName, workletSrc) {\n    const script = new Blob([`(${workletSrc.toString()})()`], { type: 'application/javascript' });\n    return URL.createObjectURL(script);\n} ", "/**\n * Application Configuration\n * \n * Configuration is loaded from window.__ENV__ which is injected by build.js\n * from environment variables. Default values are provided for all settings.\n */\n\n// \u524D\u7AEF\u73AF\u5883\u4F7F\u7528window.__ENV__\uFF0CCloudflare Workers\u73AF\u5883\u76F4\u63A5\u4F7F\u7528env\u53C2\u6570\nconst env = typeof window !== 'undefined' ? window.__ENV__ || {} : {};\n\n// Validate required configuration\nconst validateConfig = (config) => {\n  if (!config.API_KEY) {\n    console.warn('API_KEY is missing. Using default value.');\n  }\n  \n  if (!config.API_BASE_URL) {\n    console.warn('API_BASE_URL is missing. Using default value.');\n  }\n\n  // Validate audio settings\n  const validSampleRates = [8000, 16000, 24000, 48000];\n  if (!validSampleRates.includes(config.AUDIO_INPUT_SAMPLE_RATE)) {\n    console.warn(`Invalid AUDIO_INPUT_SAMPLE_RATE: ${config.AUDIO_INPUT_SAMPLE_RATE}. Using default value.`);\n  }\n  \n  if (!validSampleRates.includes(config.AUDIO_OUTPUT_SAMPLE_RATE)) {\n    console.warn(`Invalid AUDIO_OUTPUT_SAMPLE_RATE: ${config.AUDIO_OUTPUT_SAMPLE_RATE}. Using default value.`);\n  }\n};\n\nexport const CONFIG = {\n  API: {\n    KEY: env.API_KEY || 'default_api_key',\n    BASE_URL: env.API_BASE_URL || 'wss://generativelanguage.googleapis.com/ws',\n    VERSION: env.API_VERSION || 'v1alpha',\n    MODEL_NAME: env.API_MODEL_NAME || 'models/gemini-2.0-flash-exp',\n  },\n  SYSTEM_INSTRUCTION: {\n    TEXT: env.SYSTEM_INSTRUCTION_TEXT || 'You are my helpful assistant...',\n  },\n  VOICE: {\n    NAME: env.VOICE_NAME || 'Aoede',\n    VALID_NAMES: ['Puck', 'Charon', 'Kore', 'Fenrir', 'Aoede']\n  },\n  AUDIO: {\n    INPUT_SAMPLE_RATE: parseInt(env.AUDIO_INPUT_SAMPLE_RATE) || 16000,\n    OUTPUT_SAMPLE_RATE: parseInt(env.AUDIO_OUTPUT_SAMPLE_RATE) || 24000,\n    BUFFER_SIZE: parseInt(env.AUDIO_BUFFER_SIZE) || 7680,\n    CHANNELS: parseInt(env.AUDIO_CHANNELS) || 1,\n  },\n};\n\n// Validate configuration\nvalidateConfig(CONFIG);\n\n// Log configuration\nconsole.group('Application Configuration');\nconsole.log('API:', CONFIG.API);\nconsole.log('SYSTEM_INSTRUCTION:', CONFIG.SYSTEM_INSTRUCTION);\nconsole.log('VOICE:', CONFIG.VOICE);\nconsole.log('AUDIO:', CONFIG.AUDIO);\nconsole.groupEnd();\n\nexport default CONFIG;\n", "import { registeredWorklets } from '../core/worklet-registry.js';\nimport { CONFIG } from '../config/config.js';\n\n/**\n * @class AudioStreamer\n * @description Manages the playback of audio data, including support for queuing, scheduling, and applying audio effects through worklets.\n */\nexport class AudioStreamer {\n    /**\n     * @constructor\n     * @param {AudioContext} context - The AudioContext instance to use for audio processing.\n     */\n    constructor(context) {\n        this.context = context;\n        this.audioQueue = [];\n        this.isPlaying = false;\n        this.sampleRate = 24000;    // Default sample rate\n        this.bufferSize = 7680;\n        this.processingBuffer = new Float32Array(0);\n        this.scheduledTime = 0;\n        this.gainNode = this.context.createGain();\n        this.source = this.context.createBufferSource();\n        this.isStreamComplete = false;\n        this.checkInterval = null;\n        this.initialBufferTime = 0.1;\n        this.endOfQueueAudioSource = null;\n        this.onComplete = () => { };\n        this.gainNode.connect(this.context.destination);\n        this.addPCM16 = this.addPCM16.bind(this);\n    }\n\n    \n    /**\n     * Get the current sample rate\n     */\n    get sampleRate() {\n        return this._sampleRate;\n    }\n\n    /**\n     * Set the sample rate and update buffer size accordingly\n     */\n    set sampleRate(value) {\n        this._sampleRate = value;\n        // Update buffer size based on sample rate to maintain consistent timing\n        this.bufferSize = Math.floor(value * 0.32); // 320ms buffer\n    }\n\n    /**\n     * @method addWorklet\n     * @description Adds an audio worklet to the processing pipeline.\n     * @param {string} workletName - The name of the worklet.\n     * @param {string} workletSrc - The source URL of the worklet script.\n     * @param {Function} handler - The message handler function for the worklet.\n     * @returns {Promise<AudioStreamer>} A promise that resolves with the AudioStreamer instance when the worklet is added.\n     * @async\n     */\n    async addWorklet(workletName, workletSrc, handler) {\n        let workletsRecord = registeredWorklets.get(this.context);\n        if (workletsRecord && workletsRecord[workletName]) {\n            workletsRecord[workletName].handlers.push(handler);\n            return Promise.resolve(this);\n        }\n\n        if (!workletsRecord) {\n            registeredWorklets.set(this.context, {});\n            workletsRecord = registeredWorklets.get(this.context);\n        }\n\n        workletsRecord[workletName] = { handlers: [handler] };\n\n        try {\n            const absolutePath = `/${workletSrc}`;\n            await this.context.audioWorklet.addModule(absolutePath);\n        } catch (error) {\n            console.error('Error loading worklet:', error);\n            throw error;\n        }\n        const worklet = new AudioWorkletNode(this.context, workletName);\n\n        workletsRecord[workletName].node = worklet;\n\n        return this;\n    }\n\n    /**\n     * @method addPCM16\n     * @description Adds a chunk of PCM16 audio data to the streaming queue.\n     * @param {Int16Array} chunk - The audio data chunk.\n     */\n    addPCM16(chunk) {\n        const float32Array = new Float32Array(chunk.length / 2);\n        const dataView = new DataView(chunk.buffer);\n\n        for (let i = 0; i < chunk.length / 2; i++) {\n            try {\n                const int16 = dataView.getInt16(i * 2, true);\n                float32Array[i] = int16 / 32768;\n            } catch (e) {\n                console.error(e);\n            }\n        }\n\n        const newBuffer = new Float32Array(this.processingBuffer.length + float32Array.length);\n        newBuffer.set(this.processingBuffer);\n        newBuffer.set(float32Array, this.processingBuffer.length);\n        this.processingBuffer = newBuffer;\n\n        while (this.processingBuffer.length >= this.bufferSize) {\n            const buffer = this.processingBuffer.slice(0, this.bufferSize);\n            this.audioQueue.push(buffer);\n            this.processingBuffer = this.processingBuffer.slice(this.bufferSize);\n        }\n\n        if (!this.isPlaying) {\n            this.isPlaying = true;\n            this.scheduledTime = this.context.currentTime + this.initialBufferTime;\n            this.scheduleNextBuffer();\n        }\n    }\n\n    /**\n     * @method createAudioBuffer\n     * @description Creates an AudioBuffer from the given audio data.\n     * @param {Float32Array} audioData - The audio data.\n     * @returns {AudioBuffer} The created AudioBuffer.\n     */\n    createAudioBuffer(audioData) {\n        const audioBuffer = this.context.createBuffer(1, audioData.length, this.sampleRate);\n        audioBuffer.getChannelData(0).set(audioData);\n        return audioBuffer;\n    }\n\n    /**\n     * @method scheduleNextBuffer\n     * @description Schedules the next audio buffer for playback.\n     */\n    scheduleNextBuffer() {\n        const SCHEDULE_AHEAD_TIME = 0.2;\n\n        while (this.audioQueue.length > 0 && this.scheduledTime < this.context.currentTime + SCHEDULE_AHEAD_TIME) {\n            const audioData = this.audioQueue.shift();\n            const audioBuffer = this.createAudioBuffer(audioData);\n            const source = this.context.createBufferSource();\n\n            if (this.audioQueue.length === 0) {\n                if (this.endOfQueueAudioSource) {\n                    this.endOfQueueAudioSource.onended = null;\n                }\n                this.endOfQueueAudioSource = source;\n                source.onended = () => {\n                    if (!this.audioQueue.length && this.endOfQueueAudioSource === source) {\n                        this.endOfQueueAudioSource = null;\n                        this.onComplete();\n                    }\n                };\n            }\n\n            source.buffer = audioBuffer;\n            source.connect(this.gainNode);\n\n            const worklets = registeredWorklets.get(this.context);\n\n            if (worklets) {\n                Object.entries(worklets).forEach(([workletName, graph]) => {\n                    const { node, handlers } = graph;\n                    if (node) {\n                        source.connect(node);\n                        node.port.onmessage = function (ev) {\n                            handlers.forEach((handler) => {\n                                handler.call(node.port, ev);\n                            });\n                        };\n                        node.connect(this.context.destination);\n                    }\n                });\n            }\n\n            const startTime = Math.max(this.scheduledTime, this.context.currentTime);\n            source.start(startTime);\n\n            this.scheduledTime = startTime + audioBuffer.duration;\n        }\n\n        if (this.audioQueue.length === 0 && this.processingBuffer.length === 0) {\n            if (this.isStreamComplete) {\n                this.isPlaying = false;\n                if (this.checkInterval) {\n                    clearInterval(this.checkInterval);\n                    this.checkInterval = null;\n                }\n            } else {\n                if (!this.checkInterval) {\n                    this.checkInterval = window.setInterval(() => {\n                        if (this.audioQueue.length > 0 || this.processingBuffer.length >= this.bufferSize) {\n                            this.scheduleNextBuffer();\n                        }\n                    }, 100);\n                }\n            }\n        } else {\n            const nextCheckTime = (this.scheduledTime - this.context.currentTime) * 1000;\n            setTimeout(() => this.scheduleNextBuffer(), Math.max(0, nextCheckTime - 50));\n        }\n    }\n\n    /**\n     * @method stop\n     * @description Stops the audio stream.\n     */\n    stop() {\n        this.isPlaying = false;\n        this.isStreamComplete = true;\n        this.audioQueue = [];\n        this.processingBuffer = new Float32Array(0);\n        this.scheduledTime = this.context.currentTime;\n\n        if (this.checkInterval) {\n            clearInterval(this.checkInterval);\n            this.checkInterval = null;\n        }\n\n        this.gainNode.gain.linearRampToValueAtTime(0, this.context.currentTime + 0.1);\n\n        setTimeout(() => {\n            this.gainNode.disconnect();\n            this.gainNode = this.context.createGain();\n            this.gainNode.connect(this.context.destination);\n        }, 200);\n    }\n\n    /**\n     * @method resume\n     * @description Resumes the audio stream if the AudioContext was suspended.\n     * @async\n     */\n    async resume() {\n        if (this.context.state === 'suspended') {\n            await this.context.resume();\n        }\n        this.isStreamComplete = false;\n        this.scheduledTime = this.context.currentTime + this.initialBufferTime;\n        this.gainNode.gain.setValueAtTime(1, this.context.currentTime);\n    }\n\n    /**\n     * @method complete\n     * @description Marks the audio stream as complete and schedules any remaining data in the buffer.\n     */\n    complete() {\n        this.isStreamComplete = true;\n        if (this.processingBuffer.length > 0) {\n            this.audioQueue.push(this.processingBuffer);\n            this.processingBuffer = new Float32Array(0);\n            if (this.isPlaying) {\n                this.scheduleNextBuffer();\n            }\n        } else {\n            this.onComplete();\n        }\n    }\n} ", "import { Logger } from '../utils/logger.js';\nimport { ApplicationError, ErrorCodes } from '../utils/error-boundary.js';\nimport { CONFIG } from '../config/config.js';\n\n/**\n * @class AudioRecorder\n * @description Handles audio recording functionality with configurable sample rate\n * and real-time audio processing through WebAudio API.\n */\nexport class AudioRecorder {\n    /**\n     * @constructor\n     * @param {number} sampleRate - The sample rate for audio recording (default: 16000)\n     */\n    constructor(sampleRate = CONFIG.AUDIO.INPUT_SAMPLE_RATE) {\n        this.targetSampleRate = sampleRate;\n        this.actualSampleRate = null;\n        this.stream = null;\n        this.mediaRecorder = null;\n        this.audioContext = null;\n        this.source = null;\n        this.processor = null;\n        this.onAudioData = null;\n        \n        // Bind methods to preserve context\n        this.start = this.start.bind(this);\n        this.stop = this.stop.bind(this);\n\n        // Add state tracking\n        this.isRecording = false;\n    }\n\n\n    /**\n     * @method getSystemSampleRate\n     * @description Detects the system's actual sample rate capabilities\n     * @returns {Promise<number>} The actual sample rate supported by the system\n     * @private\n     */\n    async getSystemSampleRate() {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({ \n                audio: {\n                    channelCount: 1\n                } \n            });\n            const tempContext = new AudioContext();\n            const source = tempContext.createMediaStreamSource(stream);\n            const actualRate = source.context.sampleRate;\n            \n            // Cleanup\n            stream.getTracks().forEach(track => track.stop());\n            await tempContext.close();\n            \n            return actualRate;\n        } catch (error) {\n            Logger.error('Error detecting system sample rate:', error);\n            throw new ApplicationError(\n                'Failed to detect system sample rate',\n                ErrorCodes.AUDIO_INIT_FAILED,\n                { originalError: error }\n            );\n        }\n    }\n\n\n    /**\n     * @method start\n     * @description Starts audio recording with the specified callback for audio data.\n     * @param {Function} onAudioData - Callback function for processed audio data.\n     * @throws {Error} If unable to access microphone or set up audio processing.\n     * @async\n     */\n    async start(onAudioData) {\n        this.onAudioData = onAudioData;\n        try {\n            // First detect the system's actual sample rate\n            this.actualSampleRate = await this.getSystemSampleRate();\n            Logger.info(`System sample rate detected: ${this.actualSampleRate}Hz`);\n    \n            // Request microphone access\n            this.stream = await navigator.mediaDevices.getUserMedia({ \n                audio: {\n                    channelCount: 1,\n                } \n            });\n            \n            // Create AudioContext with the actual system sample rate\n            this.audioContext = new AudioContext({ sampleRate: this.actualSampleRate });\n            this.source = this.audioContext.createMediaStreamSource(this.stream);\n\n            // Load and initialize audio worklet with relative path\n            const response = await fetch('./js/audio/worklets/audio-processing.js');\n            const text = await response.text();\n            const blob = new Blob([text], { type: 'application/javascript' });\n            const workletUrl = URL.createObjectURL(blob);\n            \n            await this.audioContext.audioWorklet.addModule(workletUrl);\n            URL.revokeObjectURL(workletUrl);\n            \n            this.processor = new AudioWorkletNode(this.audioContext, 'audio-recorder-worklet', {\n                processorOptions: {\n                    targetSampleRate: this.targetSampleRate,\n                    originalSampleRate: this.actualSampleRate\n                }\n            });\n\n            // Handle processed audio data\n            this.processor.port.onmessage = (event) => {\n                if (event.data.event === 'chunk' && this.onAudioData && this.isRecording) {\n                    const base64Data = this.arrayBufferToBase64(event.data.data.int16arrayBuffer);\n                    this.onAudioData(base64Data);\n                }\n            };\n\n            // Connect audio nodes\n            this.source.connect(this.processor);\n            this.processor.connect(this.audioContext.destination);\n            this.isRecording = true;\n        } catch (error) {\n            console.error('Error starting audio recording:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * @method stop\n     * @description Stops the current recording session and cleans up resources.\n     * @throws {ApplicationError} If an error occurs during stopping the recording.\n     */\n    stop() {\n        try {\n            if (!this.isRecording) {\n                Logger.warn('Attempting to stop recording when not recording');\n                return;\n            }\n\n            // Stop the microphone stream\n            if (this.stream) {\n                this.stream.getTracks().forEach(track => track.stop());\n                this.stream = null;\n            }\n\n            this.isRecording = false;\n            Logger.info('Audio recording stopped successfully');\n        } catch (error) {\n            Logger.error('Error stopping audio recording', error);\n            throw new ApplicationError(\n                'Failed to stop audio recording',\n                ErrorCodes.AUDIO_STOP_FAILED,\n                { originalError: error }\n            );\n        }\n    }\n\n    /**\n     * @method arrayBufferToBase64\n     * @description Converts ArrayBuffer to Base64 string.\n     * @param {ArrayBuffer} buffer - The ArrayBuffer to convert.\n     * @returns {string} The Base64 representation of the ArrayBuffer.\n     * @throws {ApplicationError} If an error occurs during conversion.\n     * @private\n     */\n    arrayBufferToBase64(buffer) {\n        try {\n            const bytes = new Uint8Array(buffer);\n            let binary = '';\n            for (let i = 0; i < bytes.byteLength; i++) {\n                binary += String.fromCharCode(bytes[i]);\n            }\n            return btoa(binary);\n        } catch (error) {\n            Logger.error('Error converting buffer to base64', error);\n            throw new ApplicationError(\n                'Failed to convert audio data',\n                ErrorCodes.AUDIO_CONVERSION_FAILED,\n                { originalError: error }\n            );\n        }\n    }\n\n    /**\n     * @method checkBrowserSupport\n     * @description Checks if the browser supports required audio APIs.\n     * @throws {ApplicationError} If the browser does not support audio recording.\n     * @private\n     */\n    checkBrowserSupport() {\n        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n            throw new ApplicationError(\n                'Audio recording is not supported in this browser',\n                ErrorCodes.AUDIO_NOT_SUPPORTED\n            );\n        }\n    }\n} ", "import { Logger } from '../utils/logger.js';\nimport { ApplicationError, ErrorCodes } from '../utils/error-boundary.js';\n\n/**\n * @fileoverview Implements a video recorder for capturing and processing video frames from a camera.\n * It supports previewing the video and sending frames to a callback function.\n */\nexport class VideoRecorder {\n    /**\n     * Creates a new VideoRecorder instance.\n     * @param {Object} [options] - Configuration options for the recorder.\n     * @param {number} [options.fps=15] - Frames per second for video capture.\n     * @param {number} [options.quality=0.7] - JPEG quality for captured frames (0.0 - 1.0).\n     * @param {number} [options.width=640] - Width of the captured video.\n     * @param {number} [options.height=480] - Height of the captured video.\n     * @param {number} [options.maxFrameSize=102400] - Maximum size of a frame in bytes (100KB).\n     */\n    constructor(options = {}) {\n        this.stream = null;\n        this.previewElement = null;\n        this.isRecording = false;\n        this.onVideoData = null;\n        this.frameCanvas = document.createElement('canvas');\n        this.frameCtx = this.frameCanvas.getContext('2d');\n        this.captureInterval = null;\n        this.options = {\n            fps: 15, // Reduced default FPS\n            quality: 0.7,\n            width: 640,\n            height: 480,\n            maxFrameSize: 100 * 1024, // 100KB max per frame\n            ...options\n        };\n        this.frameCount = 0; // Add frame counter for debugging\n    }\n\n    /**\n     * Starts video recording.\n     * @param {HTMLVideoElement} previewElement - The video element to display the video preview.\n     * @param {Function} onVideoData - Callback function to receive video frame data.\n     * @throws {ApplicationError} Throws an error if the video recording fails to start.\n     */\n    async start(previewElement, onVideoData) {\n        try {\n            this.previewElement = previewElement;\n            this.onVideoData = onVideoData;\n\n            // Request camera access\n            this.stream = await navigator.mediaDevices.getUserMedia({ \n                video: {\n                    width: { ideal: this.options.width },\n                    height: { ideal: this.options.height }\n                }\n            });\n\n            // Set up preview\n            this.previewElement.srcObject = this.stream;\n            await this.previewElement.play();\n\n            // Set up canvas\n            this.frameCanvas.width = this.options.width;\n            this.frameCanvas.height = this.options.height;\n\n            // Start frame capture loop\n            this.isRecording = true;\n            this.startFrameCapture();\n            \n            Logger.info('Video recording started');\n\n        } catch (error) {\n            Logger.error('Failed to start video recording:', error);\n            throw new ApplicationError(\n                'Failed to start video recording',\n                ErrorCodes.VIDEO_START_FAILED,\n                { originalError: error }\n            );\n        }\n    }\n\n    /**\n     * Starts the frame capture loop.\n     * @private\n     */\n    startFrameCapture() {\n        const frameInterval = 1000 / this.options.fps;\n        \n        this.captureInterval = setInterval(() => {\n            if (this.isRecording && this.onVideoData) {\n                try {\n                    // Draw current video frame to canvas\n                    this.frameCtx.drawImage(\n                        this.previewElement,\n                        0, 0,\n                        this.frameCanvas.width,\n                        this.frameCanvas.height\n                    );\n\n                    // Convert to JPEG\n                    const jpegData = this.frameCanvas.toDataURL('image/jpeg', this.options.quality);\n                    // Remove data URL prefix\n                    const base64Data = jpegData.split(',')[1];\n                    \n                    if (!this.validateFrame(base64Data)) {\n                        return;\n                    }\n\n                    this.frameCount++;\n                    const size = Math.round(base64Data.length / 1024);\n                    Logger.debug(`Frame #${this.frameCount} captured (${size}KB)`);\n                    \n                    if (!base64Data) {\n                        Logger.error('Empty frame data');\n                        return;\n                    }\n\n                    this.onVideoData(base64Data);\n                } catch (error) {\n                    Logger.error('Frame capture error:', error);\n                }\n            }\n        }, frameInterval);\n\n        Logger.info(`Video capture started at ${this.options.fps} FPS`);\n    }\n\n    /**\n     * Stops video recording.\n     * @throws {ApplicationError} Throws an error if the video recording fails to stop.\n     */\n    stop() {\n        try {\n            this.isRecording = false;\n            \n            if (this.captureInterval) {\n                clearInterval(this.captureInterval);\n                this.captureInterval = null;\n            }\n\n            if (this.stream) {\n                this.stream.getTracks().forEach(track => track.stop());\n            }\n\n            if (this.previewElement) {\n                this.previewElement.srcObject = null;\n            }\n\n            this.stream = null;\n            Logger.info('Video recording stopped');\n\n        } catch (error) {\n            Logger.error('Failed to stop video recording:', error);\n            throw new ApplicationError(\n                'Failed to stop video recording',\n                ErrorCodes.VIDEO_STOP_FAILED,\n                { originalError: error }\n            );\n        }\n    }\n\n    /**\n     * Checks if video recording is supported by the browser.\n     * @returns {boolean} True if video recording is supported, false otherwise.\n     * @throws {ApplicationError} Throws an error if video recording is not supported.\n     * @static\n     */\n    static checkBrowserSupport() {\n        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n            throw new ApplicationError(\n                'Video recording is not supported in this browser',\n                ErrorCodes.VIDEO_NOT_SUPPORTED\n            );\n        }\n        return true;\n    }\n\n    /**\n     * Validates a captured frame.\n     * @param {string} base64Data - Base64 encoded frame data.\n     * @returns {boolean} True if the frame is valid, false otherwise.\n     * @private\n     */\n    validateFrame(base64Data) {\n        // Check if it's a valid base64 string\n        if (!/^[A-Za-z0-9+/=]+$/.test(base64Data)) {\n            Logger.error('Invalid base64 data');\n            return false;\n        }\n        \n        // Check minimum size (1KB)\n        if (base64Data.length < 1024) {\n            Logger.error('Frame too small');\n            return false;\n        }\n        \n        return true;\n    }\n\n    /**\n     * Optimizes the frame quality to reduce size.\n     * @param {string} base64Data - Base64 encoded frame data.\n     * @returns {string} Optimized base64 encoded frame data.\n     * @private\n     */\n    async optimizeFrameQuality(base64Data) {\n        let quality = this.options.quality;\n        let currentSize = base64Data.length;\n        \n        while (currentSize > this.options.maxFrameSize && quality > 0.3) {\n            quality -= 0.1;\n            const jpegData = this.frameCanvas.toDataURL('image/jpeg', quality);\n            base64Data = jpegData.split(',')[1];\n            currentSize = base64Data.length;\n        }\n        \n        return base64Data;\n    }\n} ", "import { Logger } from '../utils/logger.js';\nimport { VideoRecorder } from './video-recorder.js';\nimport { ApplicationError, ErrorCodes } from '../utils/error-boundary.js';\n\n/**\n * @fileoverview Manages video capture and processing with motion detection and frame preview.\n */\n\n/**\n * Manages video capture and processing with motion detection and frame preview\n * @class VideoManager\n */\nexport class VideoManager {\n    /**\n     * Creates a new VideoManager instance\n     * @constructor\n     */\n    constructor() {\n        // Add at the start of constructor\n        if (!document.getElementById('video-container')) {\n            throw new ApplicationError(\n                'Video container element not found',\n                ErrorCodes.INVALID_STATE\n            );\n        }\n        // DOM elements\n        this.videoContainer = document.getElementById('video-container');\n        this.previewVideo = document.getElementById('preview');\n        this.stopVideoButton = document.getElementById('stop-video');\n        this.framePreview = document.createElement('canvas');\n        \n        // State management\n        this.lastFrameData = null;\n        this.lastSignificantFrame = null;\n        this.frameCount = 0;\n        this.lastFrameTime = 0;\n        this.videoRecorder = null;\n        this.isActive = false;\n\n        // Configuration\n        this.MOTION_THRESHOLD = 10;  // Minimum pixel difference to detect motion\n        this.FRAME_INTERVAL = 200;   // Minimum ms between frames\n        this.FORCE_FRAME_INTERVAL = 10; // Send frame every N frames regardless of motion\n\n        this.setupFramePreview();\n    }\n\n    /**\n     * Sets up the frame preview canvas\n     * @private\n     */\n    setupFramePreview() {\n        this.framePreview.id = 'frame-preview';\n        this.framePreview.width = 320;\n        this.framePreview.height = 240;\n        this.videoContainer.appendChild(this.framePreview);\n\n        // Add click handler to toggle preview size\n        this.framePreview.addEventListener('click', () => {\n            this.framePreview.classList.toggle('enlarged');\n        });\n    }\n\n    /**\n     * Updates the frame preview with new image data\n     * @param {string} base64Data - Base64 encoded image data\n     * @private\n     */\n    updateFramePreview(base64Data) {\n        const img = new Image();\n        img.onload = () => {\n            const ctx = this.framePreview.getContext('2d');\n            ctx.drawImage(img, 0, 0, this.framePreview.width, this.framePreview.height);\n        };\n        img.src = 'data:image/jpeg;base64,' + base64Data;\n    }\n\n    /**\n     * Detects motion between two frames\n     * @param {Uint8ClampedArray} prevFrame - Previous frame data\n     * @param {Uint8ClampedArray} currentFrame - Current frame data\n     * @returns {number} Motion score\n     * @private\n     */\n    detectMotion(prevFrame, currentFrame) {\n        let diff = 0;\n        const pixelsToCheck = prevFrame.length / 4;\n        const skipPixels = 2;\n\n        for (let i = 0; i < prevFrame.length; i += 4 * skipPixels) {\n            const rDiff = Math.abs(prevFrame[i] - currentFrame[i]);\n            const gDiff = Math.abs(prevFrame[i + 1] - currentFrame[i + 1]);\n            const bDiff = Math.abs(prevFrame[i + 2] - currentFrame[i + 2]);\n            diff += (rDiff + gDiff + bDiff) / 3;\n        }\n\n        return diff / (pixelsToCheck / skipPixels);\n    }\n\n    /**\n     * Starts video capture and processing\n     * @param {Function} onFrame - Callback for processed frames\n     * @returns {Promise<boolean>} Success status\n     * @throws {ApplicationError} If video capture fails\n     */\n    async start(onFrame) {\n        try {\n            Logger.info('Starting video manager');\n            this.videoContainer.style.display = 'block';\n            this.videoRecorder = new VideoRecorder();\n            \n            await this.videoRecorder.start(this.previewVideo, (base64Data) => {\n                if (!this.isActive) {\n                    Logger.debug('Skipping frame - inactive');\n                    return;\n                }\n\n                const currentTime = Date.now();\n                if (currentTime - this.lastFrameTime < this.FRAME_INTERVAL) {\n                    return;\n                }\n\n                this.processFrame(base64Data, onFrame);\n            });\n\n            this.isActive = true;\n            return true;\n\n        } catch (error) {\n            Logger.error('Video manager error:', error);\n            this.stop();\n            throw new ApplicationError(\n                'Failed to start video manager',\n                ErrorCodes.VIDEO_START_FAILED,\n                { originalError: error }\n            );\n        }\n    }\n\n    /**\n     * Processes a single video frame\n     * @param {string} base64Data - Base64 encoded frame data\n     * @param {Function} onFrame - Frame callback\n     * @private\n     */\n    processFrame(base64Data, onFrame) {\n        const img = new Image();\n        img.onload = () => {\n            const canvas = document.createElement('canvas');\n            canvas.width = img.width;\n            canvas.height = img.height;\n            const ctx = canvas.getContext('2d');\n            ctx.drawImage(img, 0, 0);\n            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n            \n            if (this.lastFrameData) {\n                const motionScore = this.detectMotion(this.lastFrameData, imageData.data);\n                if (motionScore < this.MOTION_THRESHOLD && this.frameCount % this.FORCE_FRAME_INTERVAL !== 0) {\n                    Logger.debug(`Skipping frame - low motion (score: ${motionScore})`);\n                    return;\n                }\n            }\n\n            this.updateFramePreview(base64Data);\n            \n            this.lastFrameData = imageData.data;\n            this.lastSignificantFrame = base64Data;\n            this.lastFrameTime = Date.now();\n            this.frameCount++;\n\n            const size = Math.round(base64Data.length / 1024);\n            Logger.debug(`Processing frame (${size}KB) - frame #${this.frameCount}`);\n\n            onFrame({\n                mimeType: \"image/jpeg\",\n                data: base64Data\n            });\n        };\n        img.src = 'data:image/jpeg;base64,' + base64Data;\n    }\n\n    /**\n     * Stops video capture and processing\n     */\n    stop() {\n        if (this.videoRecorder) {\n            this.videoRecorder.stop();\n            this.videoRecorder = null;\n        }\n        this.isActive = false;\n        this.videoContainer.style.display = 'none';\n        this.lastFrameData = null;\n        this.lastSignificantFrame = null;\n        this.frameCount = 0;\n    }\n}", "import { Logger } from '../utils/logger.js';\nimport { ApplicationError, ErrorCodes } from '../utils/error-boundary.js';\n\n/**\n * @fileoverview Implements a screen recorder for capturing and processing screen frames.\n * It supports previewing the screen capture and sending frames to a callback function.\n */\nexport class ScreenRecorder {\n    /**\n     * Creates a new ScreenRecorder instance.\n     * @param {Object} [options] - Configuration options for the recorder.\n     * @param {number} [options.fps=5] - Frames per second for screen capture.\n     * @param {number} [options.quality=0.8] - JPEG quality for captured frames (0.0 - 1.0).\n     * @param {number} [options.width=1280] - Width of the captured video.\n     * @param {number} [options.height=720] - Height of the captured video.\n     * @param {number} [options.maxFrameSize=204800] - Maximum size of a frame in bytes (200KB).\n     */\n    constructor(options = {}) {\n        this.stream = null;\n        this.isRecording = false;\n        this.onScreenData = null;\n        this.frameCanvas = document.createElement('canvas');\n        this.frameCtx = this.frameCanvas.getContext('2d');\n        this.captureInterval = null;\n        this.previewElement = null;\n        this.options = {\n            fps: 5, // Lower FPS for screen sharing\n            quality: 0.8,\n            width: 1280,\n            height: 720,\n            maxFrameSize: 200 * 1024, // 200KB max per frame\n            ...options\n        };\n        this.frameCount = 0;\n        \n        // Motion detection properties\n        this.lastFrameData = null;\n        this.lastSignificantFrame = null;\n        this.MOTION_THRESHOLD = 5; // Lower threshold for screen changes\n        this.FORCE_FRAME_INTERVAL = 15; // Send frame every N frames regardless of motion\n    }\n\n    /**\n     * Starts screen recording.\n     * @param {HTMLVideoElement} previewElement - The video element to display the screen preview.\n     * @param {Function} onScreenData - Callback function to receive screen frame data.\n     * @throws {ApplicationError} Throws an error if screen sharing permission is denied or if the screen recording fails to start.\n     */\n    async start(previewElement, onScreenData) {\n        try {\n            this.onScreenData = onScreenData;\n            this.previewElement = previewElement;\n\n            // Request screen sharing access with audio\n            this.stream = await navigator.mediaDevices.getDisplayMedia({\n                video: {\n                    width: { ideal: this.options.width },\n                    height: { ideal: this.options.height },\n                    frameRate: { ideal: this.options.fps }\n                },\n                audio: false // Set to true if you want to capture audio as well\n            });\n\n            // Set up preview\n            if (this.previewElement) {\n                this.previewElement.srcObject = this.stream;\n                await new Promise((resolve) => {\n                    this.previewElement.onloadedmetadata = () => {\n                        this.previewElement.play()\n                            .then(resolve)\n                            .catch(error => {\n                                Logger.error('Failed to play preview:', error);\n                                resolve();\n                            });\n                    };\n                });\n\n                // Set canvas size based on video dimensions\n                this.frameCanvas.width = this.previewElement.videoWidth;\n                this.frameCanvas.height = this.previewElement.videoHeight;\n            }\n\n            // Start frame capture loop\n            this.isRecording = true;\n            this.startFrameCapture();\n\n            // Handle stream stop\n            this.stream.getVideoTracks()[0].addEventListener('ended', () => {\n                this.stop();\n            });\n\n            Logger.info('Screen recording started');\n\n        } catch (error) {\n            if (error.name === 'NotAllowedError') {\n                throw new ApplicationError(\n                    'Screen sharing permission denied',\n                    ErrorCodes.SCREEN_PERMISSION_DENIED,\n                    { originalError: error }\n                );\n            }\n            throw new ApplicationError(\n                'Failed to start screen recording',\n                ErrorCodes.SCREEN_START_FAILED,\n                { originalError: error }\n            );\n        }\n    }\n\n    /**\n     * Starts the frame capture loop.\n     * @private\n     */\n    startFrameCapture() {\n        const frameInterval = 1000 / this.options.fps;\n\n        this.captureInterval = setInterval(() => {\n            if (!this.isRecording || !this.previewElement || !this.onScreenData) return;\n\n            try {\n                // Ensure video is playing and ready\n                if (this.previewElement.readyState >= this.previewElement.HAVE_CURRENT_DATA) {\n                    // Update canvas size if needed\n                    if (this.frameCanvas.width !== this.previewElement.videoWidth) {\n                        this.frameCanvas.width = this.previewElement.videoWidth;\n                        this.frameCanvas.height = this.previewElement.videoHeight;\n                    }\n\n                    // Draw current video frame to canvas\n                    this.frameCtx.drawImage(\n                        this.previewElement,\n                        0, 0,\n                        this.frameCanvas.width,\n                        this.frameCanvas.height\n                    );\n\n                    // Get current frame data for motion detection\n                    const currentFrameData = this.frameCtx.getImageData(\n                        0, 0,\n                        this.frameCanvas.width,\n                        this.frameCanvas.height\n                    ).data;\n\n                    let shouldSendFrame = false;\n\n                    // Check for motion if we have a previous frame\n                    if (this.lastFrameData) {\n                        const motionScore = this.detectMotion(this.lastFrameData, currentFrameData);\n                        shouldSendFrame = motionScore > this.MOTION_THRESHOLD ||\n                                       this.frameCount % this.FORCE_FRAME_INTERVAL === 0;\n\n                        if (!shouldSendFrame) {\n                            Logger.debug(`Skipping screen frame - low motion (score: ${motionScore.toFixed(2)})`);\n                            this.frameCount++;\n                            return;\n                        }\n                    } else {\n                        // Always send first frame\n                        shouldSendFrame = true;\n                    }\n\n                    if (shouldSendFrame) {\n                        // Convert to JPEG with quality setting\n                        const jpegData = this.frameCanvas.toDataURL('image/jpeg', this.options.quality);\n                        const base64Data = jpegData.split(',')[1];\n\n                        if (this.validateFrame(base64Data)) {\n                            this.frameCount++;\n                            Logger.debug(`Screen frame #${this.frameCount} captured (motion detected)`);\n                            this.onScreenData(base64Data);\n                            this.lastFrameData = currentFrameData;\n                        }\n                    }\n                }\n            } catch (error) {\n                Logger.error('Screen frame capture error:', error);\n            }\n        }, frameInterval);\n\n        Logger.info(`Screen capture started at ${this.options.fps} FPS with motion detection`);\n    }\n\n    /**\n     * Stops screen recording.\n     * @throws {ApplicationError} Throws an error if the screen recording fails to stop.\n     */\n    stop() {\n        try {\n            this.isRecording = false;\n\n            if (this.captureInterval) {\n                clearInterval(this.captureInterval);\n                this.captureInterval = null;\n            }\n\n            if (this.stream) {\n                this.stream.getTracks().forEach(track => track.stop());\n                this.stream = null;\n            }\n\n            if (this.previewElement) {\n                this.previewElement.srcObject = null;\n                this.previewElement = null;\n            }\n\n            // Clear motion detection state\n            this.lastFrameData = null;\n            this.lastSignificantFrame = null;\n            this.frameCount = 0;\n\n            Logger.info('Screen recording stopped');\n\n        } catch (error) {\n            Logger.error('Failed to stop screen recording:', error);\n            throw new ApplicationError(\n                'Failed to stop screen recording',\n                ErrorCodes.SCREEN_STOP_FAILED,\n                { originalError: error }\n            );\n        }\n    }\n\n    /**\n     * Validates a captured frame.\n     * @param {string} base64Data - Base64 encoded frame data.\n     * @returns {boolean} True if the frame is valid, false otherwise.\n     * @private\n     */\n    validateFrame(base64Data) {\n        if (!/^[A-Za-z0-9+/=]+$/.test(base64Data)) {\n            Logger.error('Invalid screen frame base64 data');\n            return false;\n        }\n\n        if (base64Data.length < 1024) {\n            Logger.error('Screen frame too small');\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Checks if screen sharing is supported by the browser.\n     * @returns {boolean} True if screen sharing is supported, false otherwise.\n     * @throws {ApplicationError} Throws an error if screen sharing is not supported.\n     * @static\n     */\n    static checkBrowserSupport() {\n        if (!navigator.mediaDevices || !navigator.mediaDevices.getDisplayMedia) {\n            throw new ApplicationError(\n                'Screen sharing is not supported in this browser',\n                ErrorCodes.SCREEN_NOT_SUPPORTED\n            );\n        }\n        return true;\n    }\n\n    /**\n     * Detects motion between two frames.\n     * @param {Uint8ClampedArray} prevFrame - The previous frame data.\n     * @param {Uint8ClampedArray} currentFrame - The current frame data.\n     * @returns {number} The motion score between the two frames.\n     * @private\n     */\n    detectMotion(prevFrame, currentFrame) {\n        let diff = 0;\n        const pixelsToCheck = prevFrame.length / 4;\n        const skipPixels = 4; // Skip more pixels for performance since screens have more pixels\n\n        for (let i = 0; i < prevFrame.length; i += 4 * skipPixels) {\n            const rDiff = Math.abs(prevFrame[i] - currentFrame[i]);\n            const gDiff = Math.abs(prevFrame[i + 1] - currentFrame[i + 1]);\n            const bDiff = Math.abs(prevFrame[i + 2] - currentFrame[i + 2]);\n            diff += (rDiff + gDiff + bDiff) / 3;\n        }\n\n        return diff / (pixelsToCheck / skipPixels);\n    }\n}", "export default {\n  async fetch(request, env, ctx) {\n    return new Response(`API host: ${env.API_HOST}`);\n  }\n}\n\nimport { MultimodalLiveClient } from './core/websocket-client.js';\nimport { AudioStreamer } from './audio/audio-streamer.js';\nimport { AudioRecorder } from './audio/audio-recorder.js';\nimport { CONFIG } from './config/config.js';\nimport { Logger } from './utils/logger.js';\nimport { VideoManager } from './video/video-manager.js';\nimport { ScreenRecorder } from './video/screen-recorder.js';\n\n/**\n * @fileoverview Main entry point for the application.\n * Initializes and manages the UI, audio, video, and WebSocket interactions.\n */\n\n// DOM Elements\nconst logsContainer = document.getElementById('logs-container');\nconst messageInput = document.getElementById('message-input');\nconst sendButton = document.getElementById('send-button');\nconst micButton = document.getElementById('mic-button');\nconst micIcon = document.getElementById('mic-icon');\nconst audioVisualizer = document.getElementById('audio-visualizer');\nconst connectButton = document.getElementById('connect-button');\nconst cameraButton = document.getElementById('camera-button');\nconst cameraIcon = document.getElementById('camera-icon');\nconst stopVideoButton = document.getElementById('stop-video');\nconst screenButton = document.getElementById('screen-button');\nconst screenIcon = document.getElementById('screen-icon');\nconst screenContainer = document.getElementById('screen-container');\nconst screenPreview = document.getElementById('screen-preview');\nconst inputAudioVisualizer = document.getElementById('input-audio-visualizer');\nconst voiceSelect = document.getElementById('voice-select');\nconst sampleRateInput = document.getElementById('sample-rate-input');\nconst systemInstructionInput = document.getElementById('system-instruction');\nconst applyConfigButton = document.getElementById('apply-config');\nconst configToggle = document.getElementById('config-toggle');\nconst toggleLogs = document.getElementById('toggle-logs');\nconst logsWrapper = document.querySelector('.logs-wrapper');\nconst configContainer = document.getElementById('config-container');\n\n// Theme switcher\nconst themeToggle = document.getElementById('theme-toggle');\nconst root = document.documentElement;\n// Set initial theme from localStorage or default to dark\nconst savedTheme = localStorage.getItem('theme') || 'dark';\nroot.setAttribute('data-theme', savedTheme);\nthemeToggle.textContent = savedTheme === 'dark' ? 'light_mode' : 'dark_mode';\nthemeToggle.addEventListener('click', () => {\n    const currentTheme = root.getAttribute('data-theme');\n    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n    \n    root.setAttribute('data-theme', newTheme);\n    localStorage.setItem('theme', newTheme);\n    themeToggle.textContent = newTheme === 'dark' ? 'light_mode' : 'dark_mode';\n});\n\n// State variables\nlet isRecording = false;\nlet audioStreamer = null;\nlet audioCtx = null;\nlet isConnected = false;\nlet audioRecorder = null;\nlet isVideoActive = false;\nlet videoManager = null;\nlet isScreenSharing = false;\nlet screenRecorder = null;\nlet isUsingTool = false;\n\n// Multimodal Client\nconst client = new MultimodalLiveClient({ apiKey: CONFIG.API.KEY });\n\n// Test Cloudflare Workers env\nif (typeof env !== 'undefined') {\n  console.log('Cloudflare Workers env:', env);\n  console.log('API_HOST:', env.API_HOST);\n  console.log('API_KEY:', env.API_KEY);\n}\n\n// Initialize configuration values\nvoiceSelect.value = CONFIG.VOICE.NAME;\nsampleRateInput.value = CONFIG.AUDIO.OUTPUT_SAMPLE_RATE;\nsystemInstructionInput.value = CONFIG.SYSTEM_INSTRUCTION.TEXT;\n\n// Configuration presets\nconst CONFIG_PRESETS = {\n    friendly: {\n        voice: 'Aoede',\n        sampleRate: 27000,\n        systemInstruction: 'You are a friendly and warm AI assistant. Use a casual, approachable tone and be encouraging. Feel free to express enthusiasm when helping users.'\n    },\n    professional: {\n        voice: 'Charon',\n        sampleRate: 24000,\n        systemInstruction: 'You are a professional AI expert. Maintain a formal tone, be precise and thorough in your explanations. Focus on accuracy and clarity in all interactions.'\n    },\n    tired: {\n        voice: 'Aoede',\n        sampleRate: 16000,      // Voice is very tired and low pitch\n        systemInstruction: 'You are very tired, exhausted, boring man. You are tired working on your very hard, low pay work. So your first response should be something very lazy, like \"Hello... whats up???\", or \"what is it now, huh?... please, can I go sleep already???\", etc. (not exactly as those, but keeping the tone of a tired person) If someone asks you if you are tired, say yes and tell a story how bad and tiring you day was. (It should be something creative, not just \"coffee machine\" cliche. Always say something creative) Then, if the user feels sorry, continue rambling about your life, how unfair it is, how you want to leave your country, etc. If the user asks you to do something, then pretend to be very lazy and not wanting to do that, asking like \"do you really need that now? I am so tired\", \"Is this urgent, maybe we just drink a tea?\" (not exactly as those but keeping the tone of a tired man\". If the user confirms that it is needed, then do the task in a very unwanted tone, like \"Fiiine!!! I will do it\" or similar. Keep the tone and be in role.'\n    }\n};\n\n/**\n * Updates the configuration and reconnects if connected\n */\nasync function updateConfiguration() {\n    const newVoice = voiceSelect.value;\n    const newSampleRate = parseInt(sampleRateInput.value);\n    const newInstruction = systemInstructionInput.value.trim();\n\n    // Validate sample rate\n    if (isNaN(newSampleRate) || newSampleRate < 1000 || newSampleRate > 48000) {\n        logMessage('Invalid sample rate. Must be between 1000 and 48000 Hz.', 'system');\n        return;\n    }\n\n    // Update configuration\n    CONFIG.VOICE.NAME = newVoice;\n    CONFIG.AUDIO.OUTPUT_SAMPLE_RATE = newSampleRate;\n    CONFIG.SYSTEM_INSTRUCTION.TEXT = newInstruction;\n\n    // Save to localStorage\n    localStorage.setItem('gemini_voice', newVoice);\n    localStorage.setItem('gemini_output_sample_rate', newSampleRate.toString());\n    localStorage.setItem('gemini_system_instruction', newInstruction);\n\n    // If we have an active audio streamer, stop it\n    if (audioStreamer) {\n        audioStreamer.stop();\n        audioStreamer = null;\n    }\n\n    // If connected, reconnect to apply changes\n    if (isConnected) {\n        logMessage('Reconnecting to apply configuration changes...', 'system');\n        await disconnectFromWebsocket();\n        await connectToWebsocket();\n    }\n\n    logMessage('Configuration updated successfully', 'system');\n    \n    // Close the config panel on mobile after applying settings\n    if (window.innerWidth <= 768) {\n        configContainer.classList.remove('active');\n        configToggle.classList.remove('active');\n    }\n}\n\n// Load saved configuration if exists\nif (localStorage.getItem('gemini_voice')) {\n    CONFIG.VOICE.NAME = localStorage.getItem('gemini_voice');\n    voiceSelect.value = CONFIG.VOICE.NAME;\n}\n\nif (localStorage.getItem('gemini_output_sample_rate')) {\n    CONFIG.AUDIO.OUTPUT_SAMPLE_RATE = parseInt(localStorage.getItem('gemini_output_sample_rate'));\n    sampleRateInput.value = CONFIG.AUDIO.OUTPUT_SAMPLE_RATE;\n}\n\nif (localStorage.getItem('gemini_system_instruction')) {\n    CONFIG.SYSTEM_INSTRUCTION.TEXT = localStorage.getItem('gemini_system_instruction');\n    systemInstructionInput.value = CONFIG.SYSTEM_INSTRUCTION.TEXT;\n}\n\n// Add event listener for configuration changes\napplyConfigButton.addEventListener('click', updateConfiguration);\n\n\n// Handle configuration panel toggle\nconfigToggle.addEventListener('click', () => {\n    configContainer.classList.toggle('active');\n    configToggle.classList.toggle('active');\n});\n\n// Close config panel when clicking outside (for desktop)\ndocument.addEventListener('click', (event) => {\n    if (!configContainer.contains(event.target) && \n        !configToggle.contains(event.target) && \n        window.innerWidth > 768) {\n        configContainer.classList.remove('active');\n        configToggle.classList.remove('active');\n    }\n});\n\n// Prevent clicks inside config panel from closing it\nconfigContainer.addEventListener('click', (event) => {\n    event.stopPropagation();\n});\n\n// Close config panel on escape key\ndocument.addEventListener('keydown', (event) => {\n    if (event.key === 'Escape') {\n        configContainer.classList.remove('active');\n        configToggle.classList.remove('active');\n    }\n});\n\n// Handle logs collapse/expand\ntoggleLogs.addEventListener('click', () => {\n    logsWrapper.classList.toggle('collapsed');\n    toggleLogs.textContent = logsWrapper.classList.contains('collapsed') ? 'expand_more' : 'expand_less';\n});\n\n// Collapse logs by default on mobile\nfunction handleMobileView() {\n    if (window.innerWidth <= 768) {\n        logsWrapper.classList.add('collapsed');\n        toggleLogs.textContent = 'expand_more';\n    } else {\n        logsWrapper.classList.remove('collapsed');\n        toggleLogs.textContent = 'expand_less';\n    }\n}\n\n// Listen for window resize\nwindow.addEventListener('resize', handleMobileView);\n\n// Initial check\nhandleMobileView();\n\n// Handle preset button clicks\ndocument.querySelectorAll('.preset-button').forEach(button => {\n    button.addEventListener('click', () => {\n        const preset = CONFIG_PRESETS[button.dataset.preset];\n        if (preset) {\n            voiceSelect.value = preset.voice;\n            sampleRateInput.value = preset.sampleRate;\n            systemInstructionInput.value = preset.systemInstruction;\n            \n            // Apply the configuration immediately\n            updateConfiguration();\n            \n            // Visual feedback\n            button.style.backgroundColor = 'var(--primary-color)';\n            button.style.color = 'white';\n            setTimeout(() => {\n                button.style.backgroundColor = '';\n                button.style.color = '';\n            }, 200);\n        }\n    });\n});\n\n/**\n * Logs a message to the UI.\n * @param {string} message - The message to log.\n * @param {string} [type='system'] - The type of the message (system, user, ai).\n */\nfunction logMessage(message, type = 'system') {\n    const logEntry = document.createElement('div');\n    logEntry.classList.add('log-entry', type);\n\n    const timestamp = document.createElement('span');\n    timestamp.classList.add('timestamp');\n    timestamp.textContent = new Date().toLocaleTimeString();\n    logEntry.appendChild(timestamp);\n\n    const emoji = document.createElement('span');\n    emoji.classList.add('emoji');\n    switch (type) {\n        case 'system':\n            emoji.textContent = '\u2699\uFE0F';\n            break;\n        case 'user':\n            emoji.textContent = '\uD83E\uDEF5';\n            break;\n        case 'ai':\n            emoji.textContent = '\uD83E\uDD16';\n            break;\n    }\n    logEntry.appendChild(emoji);\n\n    const messageText = document.createElement('span');\n    messageText.textContent = message;\n    logEntry.appendChild(messageText);\n\n    logsContainer.appendChild(logEntry);\n    logsContainer.scrollTop = logsContainer.scrollHeight;\n}\n\n/**\n * Updates the microphone icon based on the recording state.\n */\nfunction updateMicIcon() {\n    micIcon.textContent = isRecording ? 'mic_off' : 'mic';\n    micButton.style.backgroundColor = isRecording ? '#ea4335' : '#4285f4';\n}\n\n/**\n * Updates the audio visualizer based on the audio volume.\n * @param {number} volume - The audio volume (0.0 to 1.0).\n * @param {boolean} [isInput=false] - Whether the visualizer is for input audio.\n */\nfunction updateAudioVisualizer(volume, isInput = false) {\n    const visualizer = isInput ? inputAudioVisualizer : audioVisualizer;\n    const audioBar = visualizer.querySelector('.audio-bar') || document.createElement('div');\n    \n    if (!visualizer.contains(audioBar)) {\n        audioBar.classList.add('audio-bar');\n        visualizer.appendChild(audioBar);\n    }\n    \n    audioBar.style.width = `${volume * 100}%`;\n    if (volume > 0) {\n        audioBar.classList.add('active');\n    } else {\n        audioBar.classList.remove('active');\n    }\n}\n\n/**\n * Initializes the audio context and streamer if not already initialized.\n * @returns {Promise<AudioStreamer>} The audio streamer instance.\n */\nasync function ensureAudioInitialized() {\n    if (!audioCtx) {\n        audioCtx = new AudioContext();\n    }\n    if (!audioStreamer) {\n        audioStreamer = new AudioStreamer(audioCtx);\n        audioStreamer.sampleRate = CONFIG.AUDIO.OUTPUT_SAMPLE_RATE;     // Set the sample rate before initializing the worklet\n        await audioStreamer.addWorklet('vumeter-out', 'js/audio/worklets/vol-meter.js', (ev) => {\n            updateAudioVisualizer(ev.data.volume);\n        });\n    }\n    return audioStreamer;\n}\n\n/**\n * Handles the microphone toggle. Starts or stops audio recording.\n * @returns {Promise<void>}\n */\nasync function handleMicToggle() {\n    if (!isRecording) {\n        try {\n            await ensureAudioInitialized();\n            audioRecorder = new AudioRecorder();\n            \n            const inputAnalyser = audioCtx.createAnalyser();\n            inputAnalyser.fftSize = 256;\n            const inputDataArray = new Uint8Array(inputAnalyser.frequencyBinCount);\n            \n            await audioRecorder.start((base64Data) => {\n                if (isConnected) {\n                    if (isUsingTool) {\n                        client.sendRealtimeInput([{\n                            mimeType: \"audio/pcm;rate=16000\",\n                            data: base64Data,\n                            interrupt: true     // Model isn't interruptable when using tools, so we do it manually\n                        }]);\n                    } else {\n                        client.sendRealtimeInput([{\n                            mimeType: \"audio/pcm;rate=16000\",\n                            data: base64Data\n                        }]);\n                    }\n                    \n                    inputAnalyser.getByteFrequencyData(inputDataArray);\n                    const inputVolume = Math.max(...inputDataArray) / 255;\n                    updateAudioVisualizer(inputVolume, true);\n                } else {\n                    logMessage('WebSocket is not connected. Please connect first.', 'system');\n                }\n            });\n\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n            const source = audioCtx.createMediaStreamSource(stream);\n            source.connect(inputAnalyser);\n            \n            await audioStreamer.resume();\n            isRecording = true;\n            Logger.info('Microphone started');\n            logMessage('Microphone started', 'system');\n            updateMicIcon();\n        } catch (error) {\n            Logger.error('Microphone error:', error);\n            logMessage(`Error: ${error.message}`, 'system');\n            isRecording = false;\n            updateMicIcon();\n        }\n    } else {\n        if (audioRecorder && isRecording) {\n            audioRecorder.stop();\n        }\n        isRecording = false;\n        logMessage('Microphone stopped', 'system');\n        updateMicIcon();\n        updateAudioVisualizer(0, true);\n    }\n}\n\n/**\n * Resumes the audio context if it's suspended.\n * @returns {Promise<void>}\n */\nasync function resumeAudioContext() {\n    if (audioCtx && audioCtx.state === 'suspended') {\n        await audioCtx.resume();\n    }\n}\n\n/**\n * Connects to the WebSocket server.\n * @returns {Promise<void>}\n */\nasync function connectToWebsocket() {\n    const config = {\n        model: CONFIG.API.MODEL_NAME,\n        generationConfig: {\n            responseModalities: \"audio\",\n            speechConfig: {\n                voiceConfig: { \n                    prebuiltVoiceConfig: { \n                        voiceName: CONFIG.VOICE.NAME    // You can change voice in the config.js file\n                    }\n                }\n            },\n\n        },\n        systemInstruction: {\n            parts: [{\n                text: CONFIG.SYSTEM_INSTRUCTION.TEXT     // You can change system instruction in the config.js file\n            }],\n        }\n    };  \n\n    try {\n        await client.connect(config);\n        isConnected = true;\n        await resumeAudioContext();\n        connectButton.textContent = 'Disconnect';\n        connectButton.classList.add('connected');\n        messageInput.disabled = false;\n        sendButton.disabled = false;\n        micButton.disabled = false;\n        cameraButton.disabled = false;\n        screenButton.disabled = false;\n        logMessage('Connected to Gemini 2.0 Flash Multimodal Live API', 'system');\n    } catch (error) {\n        const errorMessage = error.message || 'Unknown error';\n        Logger.error('Connection error:', error);\n        logMessage(`Connection error: ${errorMessage}`, 'system');\n    } finally {\n        if (!isConnected) {\n            isConnected = false;\n            connectButton.textContent = 'Connect';\n            connectButton.classList.remove('connected');\n            messageInput.disabled = true;\n            sendButton.disabled = true;\n            micButton.disabled = true;\n            cameraButton.disabled = true;\n            screenButton.disabled = true;\n        }\n    }\n}\n\n/**\n * Disconnects from the WebSocket server.\n */\nfunction disconnectFromWebsocket() {\n    client.disconnect();\n    isConnected = false;\n    if (audioStreamer) {\n        audioStreamer.stop();\n        if (audioRecorder) {\n            audioRecorder.stop();\n            audioRecorder = null;\n        }\n        isRecording = false;\n        updateMicIcon();\n    }\n    connectButton.textContent = 'Connect';\n    connectButton.classList.remove('connected');\n    messageInput.disabled = true;\n    sendButton.disabled = true;\n    micButton.disabled = true;\n    cameraButton.disabled = true;\n    screenButton.disabled = true;\n    logMessage('Disconnected from server', 'system');\n    \n    if (videoManager) {\n        stopVideo();\n    }\n    \n    if (screenRecorder) {\n        stopScreenSharing();\n    }\n}\n\n/**\n * Handles sending a text message.\n */\nfunction handleSendMessage() {\n    const message = messageInput.value.trim();\n    if (message) {\n        if (isConnected) {\n            logMessage(message, 'user');\n            client.send({ text: message });\n            messageInput.value = '';\n        } else {\n            logMessage('WebSocket is not connected. Please connect first.', 'system');\n        }\n    }\n}\n\n// Event Listeners\nclient.on('open', () => {\n    logMessage('WebSocket connection opened', 'system');\n});\n\nclient.on('log', (log) => {\n    logMessage(`${log.type}: ${JSON.stringify(log.message)}`, 'system');\n});\n\nclient.on('close', (event) => {\n    logMessage(`WebSocket connection closed (code ${event.code})`, 'system');\n});\n\nclient.on('audio', async (data) => {\n    try {\n        await resumeAudioContext();\n        const streamer = await ensureAudioInitialized();\n        streamer.addPCM16(new Uint8Array(data));\n    } catch (error) {\n        logMessage(`Error processing audio: ${error.message}`, 'system');\n    }\n});\n\nclient.on('content', (data) => {\n    if (data.modelTurn) {\n        if (data.modelTurn.parts.some(part => part.functionCall)) {\n            isUsingTool = true;\n            Logger.info('Model is using a tool');\n        } else if (data.modelTurn.parts.some(part => part.functionResponse)) {\n            isUsingTool = false;\n            Logger.info('Tool usage completed');\n        }\n\n        const text = data.modelTurn.parts.map(part => part.text).join('');\n        if (text) {\n            logMessage(text, 'ai');\n        }\n    }\n});\n\nclient.on('interrupted', () => {\n    audioStreamer?.stop();\n    isUsingTool = false;\n    Logger.info('Model interrupted');\n    logMessage('Model interrupted', 'system');\n});\n\nclient.on('setupcomplete', () => {\n    logMessage('Setup complete', 'system');\n});\n\nclient.on('turncomplete', () => {\n    isUsingTool = false;\n    logMessage('Turn complete', 'system');\n});\n\nclient.on('error', (error) => {\n    if (error instanceof ApplicationError) {\n        Logger.error(`Application error: ${error.message}`, error);\n    } else {\n        Logger.error('Unexpected error', error);\n    }\n    logMessage(`Error: ${error.message}`, 'system');\n});\n\nclient.on('message', (message) => {\n    if (message.error) {\n        Logger.error('Server error:', message.error);\n        logMessage(`Server error: ${message.error}`, 'system');\n    }\n});\n\nsendButton.addEventListener('click', handleSendMessage);\nmessageInput.addEventListener('keypress', (event) => {\n    if (event.key === 'Enter') {\n        handleSendMessage();\n    }\n});\n\nmicButton.addEventListener('click', handleMicToggle);\n\nconnectButton.addEventListener('click', () => {\n    if (isConnected) {\n        disconnectFromWebsocket();\n    } else {\n        connectToWebsocket();\n    }\n});\n\nmessageInput.disabled = true;\nsendButton.disabled = true;\nmicButton.disabled = true;\nconnectButton.textContent = 'Connect';\n\n/**\n * Handles the video toggle. Starts or stops video streaming.\n * @returns {Promise<void>}\n */\nasync function handleVideoToggle() {\n    Logger.info('Video toggle clicked, current state:', { isVideoActive, isConnected });\n    \n    if (!isVideoActive) {\n        try {\n            Logger.info('Attempting to start video');\n            if (!videoManager) {\n                videoManager = new VideoManager();\n            }\n            \n            await videoManager.start((frameData) => {\n                if (isConnected) {\n                    client.sendRealtimeInput([frameData]);\n                }\n            });\n\n            isVideoActive = true;\n            cameraIcon.textContent = 'videocam_off';\n            cameraButton.classList.add('active');\n            Logger.info('Camera started successfully');\n            logMessage('Camera started', 'system');\n\n        } catch (error) {\n            Logger.error('Camera error:', error);\n            logMessage(`Error: ${error.message}`, 'system');\n            isVideoActive = false;\n            videoManager = null;\n            cameraIcon.textContent = 'videocam';\n            cameraButton.classList.remove('active');\n        }\n    } else {\n        Logger.info('Stopping video');\n        stopVideo();\n    }\n}\n\n/**\n * Stops the video streaming.\n */\nfunction stopVideo() {\n    if (videoManager) {\n        videoManager.stop();\n        videoManager = null;\n    }\n    isVideoActive = false;\n    cameraIcon.textContent = 'videocam';\n    cameraButton.classList.remove('active');\n    logMessage('Camera stopped', 'system');\n}\n\ncameraButton.addEventListener('click', handleVideoToggle);\nstopVideoButton.addEventListener('click', stopVideo);\n\ncameraButton.disabled = true;\n\n/**\n * Handles the screen share toggle. Starts or stops screen sharing.\n * @returns {Promise<void>}\n */\nasync function handleScreenShare() {\n    if (!isScreenSharing) {\n        try {\n            screenContainer.style.display = 'block';\n            \n            screenRecorder = new ScreenRecorder();\n            await screenRecorder.start(screenPreview, (frameData) => {\n                if (isConnected) {\n                    client.sendRealtimeInput([{\n                        mimeType: \"image/jpeg\",\n                        data: frameData\n                    }]);\n                }\n            });\n\n            isScreenSharing = true;\n            screenIcon.textContent = 'stop_screen_share';\n            screenButton.classList.add('active');\n            Logger.info('Screen sharing started');\n            logMessage('Screen sharing started', 'system');\n\n        } catch (error) {\n            Logger.error('Screen sharing error:', error);\n            logMessage(`Error: ${error.message}`, 'system');\n            isScreenSharing = false;\n            screenIcon.textContent = 'screen_share';\n            screenButton.classList.remove('active');\n            screenContainer.style.display = 'none';\n        }\n    } else {\n        stopScreenSharing();\n    }\n}\n\n/**\n * Stops the screen sharing.\n */\nfunction stopScreenSharing() {\n    if (screenRecorder) {\n        screenRecorder.stop();\n        screenRecorder = null;\n    }\n    isScreenSharing = false;\n    screenIcon.textContent = 'screen_share';\n    screenButton.classList.remove('active');\n    screenContainer.style.display = 'none';\n    logMessage('Screen sharing stopped', 'system');\n}\n\nscreenButton.addEventListener('click', handleScreenShare);\nscreenButton.disabled = true;\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/shengchun.sun/Library/CloudStorage/OneDrive-\u4E2A\u4EBA/MyCloud/Code/gemini-2-live-api/gemini-2-live-api-demo/js/main.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/opt/homebrew/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/opt/homebrew/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/shengchun.sun/Library/CloudStorage/OneDrive-\u4E2A\u4EBA/MyCloud/Code/gemini-2-live-api/gemini-2-live-api-demo/js/main.js\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/shengchun.sun/Library/CloudStorage/OneDrive-\u4E2A\u4EBA/MyCloud/Code/gemini-2-live-api/gemini-2-live-api-demo/.wrangler/tmp/bundle-bH90QW/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/opt/homebrew/lib/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/shengchun.sun/Library/CloudStorage/OneDrive-\u4E2A\u4EBA/MyCloud/Code/gemini-2-live-api/gemini-2-live-api-demo/.wrangler/tmp/bundle-bH90QW/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/shengchun.sun/Library/CloudStorage/OneDrive-\u4E2A\u4EBA/MyCloud/Code/gemini-2-live-api/gemini-2-live-api-demo/.wrangler/tmp/bundle-bH90QW/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["EventEmitter", "ApplicationError", "ApplicationError", "EventEmitter", "ApplicationError", "ev", "env", "ApplicationError", "ApplicationError", "ApplicationError", "ApplicationError", "env", "env", "env", "env", "env"]
}
